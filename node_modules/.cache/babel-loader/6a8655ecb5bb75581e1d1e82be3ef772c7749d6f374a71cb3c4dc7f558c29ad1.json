{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: {\n    email: '',\n    password: '',\n    name: ''\n  },\n  status: 'idle'\n};\nconst baseUrl = 'http://localhost:3001/signup';\nexport const postRegisterUser = createAsyncThunk('user/postRegister', async (userdata, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userdata)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to register user');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst registerSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setValue(state, action) {\n      state.value = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(postRegisterUser.pending, state => {\n      state.status = 'loading';\n    }).addCase(postRegisterUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.value = action.payload;\n    }).addCase(postRegisterUser.rejected, state => {\n      state.status = 'failed';\n    });\n  }\n});\nexport const {\n  setValue\n} = registerSlice.actions;\nexport const selectRegisterUser = state => state.register.value;\nexport const selectStatus = state => state.register.status;\nexport default registerSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","value","email","password","name","status","baseUrl","postRegisterUser","userdata","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","message","registerSlice","reducers","setValue","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectRegisterUser","register","selectStatus","reducer"],"sources":["/home/faisal/Documents/Final/Capstone-Front-End/src/features/user/registrationSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: {\n    email: '',\n    password: '',\n    name: '',\n  },\n  status: 'idle',\n};\n\nconst baseUrl = 'http://localhost:3001/signup';\n\nexport const postRegisterUser = createAsyncThunk(\n  'user/postRegister',\n  async (userdata, { rejectWithValue }) => {\n    try {\n      const response = await fetch(baseUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userdata),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to register user');\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\nconst registerSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setValue(state, action) {\n      state.value = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(postRegisterUser.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(postRegisterUser.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.value = action.payload;\n      })\n      .addCase(postRegisterUser.rejected, (state) => {\n        state.status = 'failed';\n      });\n  },\n});\n\nexport const { setValue } = registerSlice.actions;\n\nexport const selectRegisterUser = (state) => state.register.value;\nexport const selectStatus = (state) => state.register.status;\n\nexport default registerSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;IACLC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE;EACR,CAAC;EACDC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,OAAO,GAAG,8BAA8B;AAE9C,OAAO,MAAMC,gBAAgB,GAAGT,gBAAgB,CAC9C,mBAAmB,EACnB,OAAOU,QAAQ,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;MACpCM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOZ,eAAe,CAACY,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,MAAMC,aAAa,GAAGxB,WAAW,CAAC;EAChCK,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZwB,QAAQ,EAAE;IACRC,QAAQA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACzB,KAAK,GAAG0B,MAAM,CAACC,OAAO;IAC9B;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACxB,gBAAgB,CAACyB,OAAO,EAAGN,KAAK,IAAK;MAC5CA,KAAK,CAACrB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD0B,OAAO,CAACxB,gBAAgB,CAAC0B,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACrB,MAAM,GAAG,WAAW;MAC1BqB,KAAK,CAACzB,KAAK,GAAG0B,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDG,OAAO,CAACxB,gBAAgB,CAAC2B,QAAQ,EAAGR,KAAK,IAAK;MAC7CA,KAAK,CAACrB,MAAM,GAAG,QAAQ;IACzB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEoB;AAAS,CAAC,GAAGF,aAAa,CAACY,OAAO;AAEjD,OAAO,MAAMC,kBAAkB,GAAIV,KAAK,IAAKA,KAAK,CAACW,QAAQ,CAACpC,KAAK;AACjE,OAAO,MAAMqC,YAAY,GAAIZ,KAAK,IAAKA,KAAK,CAACW,QAAQ,CAAChC,MAAM;AAE5D,eAAekB,aAAa,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}